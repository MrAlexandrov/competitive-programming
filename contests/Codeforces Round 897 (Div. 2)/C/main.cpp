#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

void solve() {
    int n;
    cin >> n;
    bool was = false;
    int R = 0;
    int x;
    for (int i = 0; i < n; ++i) {
        cin >> x;
        if (!was && x != i) {
            R = i;
            was = true;
        }
    }
    if (!was) {
        R = n;
    }
    int y = 0;
    int next = R;
    while (y >= 0) {
        cout << next << endl;
        cin >> y;
        if (y < 0) {
            return;
        }
        next = y;
    }
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    ///freopen("input.in", "r", stdin);
    ///freopen("output.out", "w", stdout);
    int t = 1;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}

/**
Пусть в начале есть непрерывная последовательность, начинаяющаяся с 0.
Оптимальной игрой для оппонента - убирать самые маленькие числа, начиная с 0.
Как только оппонент удаляет число из непрерывной последовательности, мы должны его вернуть, чтобы не ухудшить ответ.
После этого мы будем добавлять числа оппонента, до 0 или пока игра не закончится. <----------------------+
Так как оппонент может играть не оптимально (не ухудшая R для нас), мы можем улучшить ответ.             |
Это можно сделать, пытаясь увеличить непрерывную последовательность.                                     |
Для улучшения мы можем добавлять MEX(S), в таком случае, игра сразу будет сводиться к этой строчке ------+
**/
